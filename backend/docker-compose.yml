services:
  # Banco de dados PostgreSQL para Auth Service
  auth-db:
    image: postgres:14-alpine
    container_name: auth-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_DB: ${AUTH_DB_NAME}
    ports:
      - "${AUTH_DB_PORT}:5432"
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - sapientia-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_DB_USER} -d ${AUTH_DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Auth Service
  auth-service:
    image: ${AUTH_SERVICE_IMAGE}
    container_name: auth-service
    restart: unless-stopped
    entrypoint: ["/app/entrypoint.sh"]
    command: ["node", "dist/index.js"]
    environment:
      - PORT=${PORT}
      - NODE_ENV=${NODE_ENV}
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=postgresql://${AUTH_DB_USER}:${AUTH_DB_PASSWORD}@auth-db:5432/${AUTH_DB_NAME}
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      auth-db:
        condition: service_healthy
    networks:
      - sapientia-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=PathPrefix(`/api/v1/auth`) || PathPrefix(`/api/v1/me`)"
      - "traefik.http.services.auth.loadbalancer.server.port=${PORT}"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:${PORT}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Organization Service
  organization-service:
    image: ${ORG_SERVICE_IMAGE}
    container_name: organization-service
    restart: unless-stopped
    entrypoint: ["/app/entrypoint.sh"]
    command: ["node", "dist/index.js"]
    environment:
      - PORT=${ORG_PORT}
      - NODE_ENV=${NODE_ENV}
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=postgresql://${ORG_DB_USER}:${ORG_DB_PASSWORD}@organization-db:5432/${ORG_DB_NAME}
      - AUTH_SERVICE_URL=http://auth-service:${PORT}
    ports:
      - "${ORG_PORT}:${ORG_PORT}"
    depends_on:
      - organization-db
      - auth-service
    volumes:
      - ./organization-service:/app
      - /app/node_modules
    networks:
      - sapientia-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.organization.rule=PathPrefix(`/api/v1/organizations`)"
      - "traefik.http.services.organization.loadbalancer.server.port=3001"

  # Banco de dados para Organization Service
  organization-db:
    image: postgres:14-alpine
    container_name: organization-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${ORG_DB_USER}
      POSTGRES_PASSWORD: ${ORG_DB_PASSWORD}
      POSTGRES_DB: ${ORG_DB_NAME}
    ports:
      - "${ORG_DB_PORT}:5432"
    volumes:
      - organization-db-data:/var/lib/postgresql/data
    networks:
      - sapientia-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${ORG_DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway (Traefik)
  traefik:
    image: traefik:v2.9
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik
    networks:
      - sapientia-network
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=30 # Verifica novas imagens a cada 30 segundos
    networks:
      - sapientia-network

volumes:
  auth-db-data:
  organization-db-data:

networks:
  sapientia-network:
    driver: bridge